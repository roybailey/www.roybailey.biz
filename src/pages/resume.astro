---
import Layout from '@/layouts/ResumeLayout.astro';
import Section from "@/components/Section.astro";
import Experience from "@/components/Experience.astro";
import Employment from "@/components/Employment.astro";

import { getCollection, getEntry } from 'astro:content';
import {
    type Resume,
    type Employment,
    type Role,
    type SkillExperience,
    type SkillSummary,
    renderDuration,
    renderPeriod, getDuration, addDuration,
} from "../data/resume/resume";

// ------------------------------------------------------------
// Resume loading
// ------------------------------------------------------------
console.log("==========================================")
console.log("----- Resume Loading")

const resume:Resume = (await getEntry('resumes', 'roybailey')).data as Resume
console.log(JSON.stringify(resume,null,2))
console.log("-----\n\n\n\n\n")

const employmentHistory: Employment[] = (await getCollection('employmentHistory')).map(it=>it.data) as Employment[];
// sort history into newest first
employmentHistory.forEach(employment => {
    employment.roles.forEach(role => {
        role.period = {
            fromDate: role.startDate,
            uptoDate: (role.endDate) ? role.endDate : new Date().toISOString().split("T")[0],
        }
        role.duration = getDuration(role.period)
    })
    employment.roles.sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime())
    employment.period = {
        fromDate: employment.roles[employment.roles.length-1].period.fromDate,
        uptoDate: employment.roles[0].period.uptoDate,
    }
    employment.duration = getDuration(employment.period)
})
employmentHistory.sort((a, b) => new Date(b.period.fromDate).getTime() - new Date(a.period.fromDate).getTime());
console.log(JSON.stringify(employmentHistory,null,2))
console.log("-----\n\n\n\n\n")



// ------------------------------------------------------------
// Skill Categories
// ------------------------------------------------------------
console.log("==========================================")
console.log("----- Skill Categories")
const skillCategories = resume.technical;
skillCategories.forEach(category => {
    let listSkills:string[] = []
    category.skills.map(skill =>
        skill.split(',')
            .map(categorySkill => categorySkill.trim().toLowerCase())
            .forEach(skill => listSkills.push(skill))
    )
    category.skills = listSkills
})
console.log(JSON.stringify(skillCategories,null,2))
console.log("-----\n\n\n\n\n")



// ------------------------------------------------------------
// Resume Skills History
// ------------------------------------------------------------
console.log("==========================================")
console.log("----- Resume Skills History")
const skills: SkillExperience[] = []
employmentHistory?.forEach((employment)=> {
    employment.roles.forEach(role => {
        role.skills?.split(',')
            .map(skill=> skill.trim().toLowerCase())
            .forEach(skill => {
                let category = skillCategories.filter(category => {
                    let match = category.skills.indexOf(skill) >= 0
                    return match
                });
                if (category.length > 0) {
                    skills.push({
                        skill: skill,
                        category: category[0].title,
                        company: employment.company,
                        role: role.title,
                        period: role.period,
                        duration: role.duration,
                    })
                }
            })
    })
})
skills.sort((a, b) => new Date(b.period.fromDate).getTime() - new Date(a.period.fromDate).getTime());
console.log(JSON.stringify(skills,null,2))
console.log("-----\n\n\n\n\n")


// ------------------------------------------------------------
// Resume Skills Summary
// ------------------------------------------------------------
console.log("==========================================")
console.log("----- Resume Skills Summary")
// let springboot = skills
//     .filter(skill=> skill.skill === "springboot")
//     .reduce((acc, skill) => {
//         return addDuration(acc, skill.fromDate, skill.uptoDate)
//     }, { years: 0, months: 0 });
// console.log(JSON.stringify(springboot,null,2))
console.log("==========================================")
let skillSummary: SkillSummary[] = skillCategories.flatMap((category => category.skills.map((skill) => {
    return {
        skill: skill,
        category: category.title,
        duration: { years: 0, months: 0 },
    }
})))
skills.reduce((acc, skill) => {
    acc.filter(summary => summary.skill === skill.skill)
        .forEach((summary) => {
            let lastUsed = new Date(skill.period.uptoDate);
            summary.lastUsed = (!summary.lastUsed || summary.lastUsed < lastUsed)? lastUsed : summary.lastUsed
            summary.duration = addDuration(summary.duration, skill.period)
        })
    return acc
}, skillSummary);
skillSummary.sort((a, b) => new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime());
console.log(JSON.stringify(skillSummary,null,2))
console.log("-----\n\n\n\n\n")

---

<Layout>

    <div class="mb-6">
        <div class="text-4xl text-center">{resume.tagline}</div>
        <div class="px-10 text-xl italic text-center">"{resume.summary}"</div>
    </div>

    <Experience class="break-after-page"
                leadership={resume.leadership}
                business={resume.business}
                skillCategories={skillCategories}
                skillSummary={skillSummary}
    />

    <Section title="Employment History">
        {employmentHistory.map((employment) => (
                <div class="py-4 flex flex-col items-center break-inside-avoid"}" key={employment.company+employment.period.fromDate}>
                    <Employment employment={employment} roles={employment.roles} />
                </div>
        ))}
    </Section>

    <Section title="Education">
        <div class="px-10 text-l italic text-center">"{resume.educationSummary}"</div>
    </Section>

    <Section title="Personal Interests">
        <div class="px-10 text-xl italic text-center">"{resume.personalInterests}"</div>
    </Section>

</Layout>


<script>
    function openRecent() {
        document.querySelectorAll('[data-state="closed"] button.starwind-accordion-trigger')
            .forEach((trigger, index) => {
                console.log(`found ${trigger.id}`);
                let age = trigger.attributes.getNamedItem("age")
                console.log(`age= ${age}`);
                if(parseInt(age?.value.toString() || "99") < 5) {
                    console.log(`opening recent age: ${age}`);
                    trigger.click(); // Simulates user clicking to open the accordion
                }
            });
    }
    // Set on page load
    openRecent();
</script>
